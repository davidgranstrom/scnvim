*SCNvim.txt*    For nvim version 0.4.4 or later.

        Neovim frontend for SuperCollider

SCNvim                                      *scnvim*

1. Description..............................|scnvim-description|
   1.1 Acknowledgments
2. Mappings.................................|scnvim-mappings|
   2.1 Remapping
3. Commands.................................|scnvim-commands|
4. Help system..............................|scnvim-help-system|
5. Configuration............................|scnvim-configuration|
6. License..................................|scnvim-license|

==============================================================================
DESCRIPTION                                                 *scnvim-description*

SCNvim is a SuperCollider editor frontend for Neovim. It provides ways to
evaluate code and inspect output from the post window among other features
such as automatic function signature hints and more. The goal of this plugin
is to create an integrated development environment for SuperCollider in
Neovim.

Acknowledgments~

This plugin borrows some code and ideas from the original scvim
implementation, for example the code for indent and syntax highlighting.

==============================================================================
MAPPINGS                                                       *scnvim-mappings*

<C-e>                   Send current block or line.
                        (depending on context).
                        Mode: Insert, Normal
                        Name: `<Plug>(scnvim-send-block)`

<C-e>                   Send current selection.
                        Mode: Visual
                        Name: `<Plug>(scnvim-send-selection)`

<M-e>                   Send current line.
                        Mode: Insert, Normal
                        Name: `<Plug>(scnvim-send-line)`

<F12>                   Hard stop.
                        Mode: Insert, Normal
                        Name: `<Plug>(scnvim-hard-stop)`

<CR>                    Toggle post window buffer.
                        Mode: Insert, Normal
                        Name: `<Plug>(scnvim-postwindow-toggle)`

<M-L>                   Clear post window buffer.
                        Mode:  Insert, Normal
                        Name: `<Plug>(scnvim-postwindow-clear)`

K                       Open documentation.
                        See `keywordprg`
                        Mode: Normal

<C-k>                   Show function signature for object under cursor.
                        Mode:  Insert, Normal
                        Name: `<Plug>(scnvim-show-signature)`

Remapping~

You can remap all of the default mappings using the `<Plug>` mappings in the
table above. Notice the usage of `nmap` rather than `nnoremap` in the following
examples, since we actually want to map to the `<Plug>` mappings recursively.
>
  nmap <F5> <Plug>(scnvim-send-block)
  nmap <C-s> <Plug>(scnvim-send-line)
  imap <C-s> <c-o><Plug>(scnvim-send-line)

==============================================================================
COMMANDS                                                       *scnvim-commands*

Command                        Description
-------                        -----------
`SCNvimStart`                    Start SuperCollider
`SCNvimStop`                     Stop SuperCollider
`SCNvimRecompile`                Recompile SCClassLibrary
`SCNvimTags`                     Create auto-generated utility files
`SCNvimHelp` <subject>           Open HelpBrowser or window split for <subject>
`SCNvimStatusLine`               Display server status in 'statusline'

==============================================================================
HELP SYSTEM                                                 *scnvim-help-system*

SCNvim can be configured to render SCDoc help files (.schelp) to plain text
and display the result in a split window, much like Nvim's default help system.

The scnvim help system needs a program to convert HTML help files into plain
text. By default it looks for `pandoc`[1], so it should be enough to have `pandoc`
accessible in your `$PATH`.

Set the global variable `g:scnvim_scdoc` in your `init.vim` to enable the
help system.
>
  let g:scnvim_scdoc = 1
<
To view documentation in the regular HelpBrowser, set `g:scnvim_scdoc` to
a value of zero (you don't need to restart vim for this to take effect).

Useful hints ~

Use the `K` command to open a split window with the documentation of the word
under the cursor. The 'quickfix' window is used to display methods, press enter
on a match to jump to the corresponding help file. Read `:h quickfix` to learn
more about how the 'quickfix' window works.

To see an overview (outline) of the content of the help file press `gO`. This
will open a window local quickfix window (a 'location-list'), use this list to
jump to different sections of the document.

Customization ~

If you want to use another program as html to plain text converter, or if you
have `pandoc` installed but not accessible in your `$PATH` you can set
`g:scnvim_scdoc_render_prg` to point to an executable of your choice. If you
are not using `pandoc` you will also need to supply an argument string which
will be used for file input and output. The default format string is:
>
  let g:scnvim_scdoc_render_args = '% --from html --to plain -o %'
<
Note the two sclang format symbols ('%'), the first '%' represents the input file
(html) and the second one is the output file (txt).

A complete custom example using `html2text`:
>
  let g:scnvim_scdoc_render_prg = '/usr/local/bin/html2text'
  let g:scnvim_scdoc_render_args = '% -o %'
<

[1]: https://pandoc.org/

==============================================================================
CONFIGURATION                                             *scnvim-configuration*

The following variables are used to configure scnvim. This plugin should work
out-of-the-box so it is not necessary to set them if you are happy with the
defaults.

Run `:checkhealth` to diagnose common problems with your config.

Post window~
Disable syntax colouring in the post window
Default is 1 (on)
>
  let g:scnvim_postwin_syntax_hl = 0

Vertical "v" or horizontal "h" split.
>
  let g:scnvim_postwin_orientation = 'v'

Position of the post window "right" or "left".
>
  let g:scnvim_postwin_direction = 'right'

Set the size of the post window.
Default is half the terminal size for vertical and a third for horizontal.
>
  let g:scnvim_postwin_size = 25

Automatically open post window on a SuperCollider error
>
  let g:scnvim_postwin_auto_toggle = 1

Set the scrollback limit for the post window. (default: 5000 lines)
A value of -1 means infinite scrollback (use with care in high output situations).
>
  let g:scnvim_postwin_scrollback = 5000

Eval flash~

Duration of the highlight in milliseconds. A value of 0 disables eval flash.
>
  let g:scnvim_eval_flash_duration = 100

Number of flashes. A value of 0 disables eval flash.
>
  let g:scnvim_eval_flash_repeats = 2

Configure the color
>
  highlight SCNvimEval guifg=black guibg=white ctermfg=black ctermbg=white

Extras~

Path to the sclang executable.
SCNvim will look in some known locations for sclang, but if it can't find it
use this variable instead (setting this also improves startup time slightly).
>
  let g:scnvim_sclang_executable = ''

Update rate for server info in status line (seconds)
(don't set this to low or vim will get slow)
>
  let g:scnvim_statusline_interval = 1

Set this variable if you don't want the signature help feature
>
  let g:scnvim_echo_args = 0

Set this variable if you don't want the floating window feature
>
  let g:scnvim_echo_args_float = 0

Set this variable if you don't want any default mappings
>
  let g:scnvim_no_mappings = 1

Browse SuperCollider documentation in nvim (see |scnvim-help-system| for more information)
>
  let g:scnvim_scdoc = 1

Set the snippet format generated by :SCNvimTags
SCNvim supports "ultisnips", "luasnip" and "snippets.nvim"
>
  let g:scnvim_snippet_format = "snippets.nvim"

in lua
>
  vim.g.scnvim_snippet_format = "snippets.nvim"

If scnvim_snippet_format is unset/empty it will default to "ultisnips"

Sclang Options Customization ~

If you wanted to pass options to the call that SCNVim uses when it starts
sclang, you can use `g:scnvim_sclang_options` to add additional parameters.
For example, if you wanted to change the udp port that sclang uses, you could
set:
>
    let g:scnvim_sclang_options = ['-u', 9999]

or if you wanted to change the yaml file it uses on startup, you could set:
>
    let g:scnvim_sclang_options = ['-l', "/path/to/config.yaml"]

if you wanted to set both, you could use:
>
    let g:scnvim_sclang_options = ['-l', '/path/to/config.yaml', '-u', 9999]

Note that the -i and the -d flags are already set by SCNVim, so they do not
need to be used, and some parameters (i.e. -a, -v, -i and -D) will cause
sclang to not behave nicely with SCNvim. This option is provided to the
advanced user without any error checks, so be careful.

==============================================================================
LICENSE                                                         *scnvim-license*

scnvim - SuperCollider integration for Neovim
Copyright © 2018-2019 David Granström

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.

 vim:tw=78:et:ft=help:norl:
